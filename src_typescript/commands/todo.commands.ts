import { Command } from "./command.class";
import { taskService } from '../core/task.service'
import { keyboard_help, keyboard_help_list } from "../keyboards/inline";

// —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function create_list_of_tasks(): Promise<string> {
    const list_tasks = await taskService.get_all();
    let text = "";
    let count_task = 1;
    for (let i in list_tasks) {
        if (list_tasks[i] != "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç") {
            text = text + `${count_task} ${list_tasks[i]} \n`;
            count_task += 1;
        } else {
            text = list_tasks[i];
        };
    };
    return text;
};

export class TodoCommands extends Command {
    handle(): void {
        // task_list callback (—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á)
        this.bot.action('task_list', async (ctx) => {
            let list_of_task = await create_list_of_tasks();
            ctx.editMessageText(
                `üìù ToDo Bot\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n${list_of_task}`,
                keyboard_help
            );
        });
        // msg_to_task callback (—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
        this.bot.action('msg_to_task', async (ctx) => {
            let task_title = String(ctx.text);
            if (await taskService.create(task_title)) {
                ctx.editMessageText(
                    `üìù ToDo Bot\n–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:\n${task_title}`,
                    keyboard_help_list
                );
            } else {
                ctx.editMessageText(
                    `üìù ToDo Bot\n–£–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞:\n${task_title}`,
                    keyboard_help_list
                );
            };
        });
        // del command (—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö)
        this.bot.hears(/^\/del /, async (ctx) => {
            let list_of_task = await create_list_of_tasks();
            let task_for_completing: number = Number(ctx.text.split(' ')[1]);
            if (task_for_completing === task_for_completing) {
                if (await taskService.complete(task_for_completing)) {
                    let list_of_task = await create_list_of_tasks();
                    let text_for_reply = `üìù ToDo Bot\n–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n${list_of_task}`;
                    ctx.reply(
                        text_for_reply,
                        keyboard_help
                    );
                } else {
                    let text_for_reply = `üìù ToDo Bot\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n${list_of_task}`;
                    ctx.reply(
                        text_for_reply,
                        keyboard_help
                    );
                };
            } else {
                let text_for_reply = `üìù ToDo Bot \
                \n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ /del \
                \n–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ. \
                \n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: \
                \n${list_of_task}`;
                ctx.reply(
                    text_for_reply,
                    keyboard_help
                );
            };
        });
    };
};
