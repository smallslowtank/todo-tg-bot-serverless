from aiogram import Router, types, F

from keyboards.inline import get_callback_buttons
from core.services import task_service

router = Router(name=__name__)


async def create_list_of_tasks():
    """
    —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    list_tasks = await task_service.get_all()
    text = ""
    count_task = 1
    for i in list_tasks:
        if i != "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç":
            text = text + str(count_task) + " " + i[1] + "\n"
            count_task += 1
        else:
            text = i
    return text


@router.callback_query(
    F.data == "msg_to_task",
)
async def msg_to_task(callback: types.CallbackQuery):
    """
    –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    task_title = callback.message.text
    if await task_service.create(task_title) == True:
        await callback.message.edit_text(
            text=f"üìù ToDo Bot\n–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:\n{task_title}",
            reply_markup=get_callback_buttons(
                buttons={
                    "Tasks üìù": "list_task",
                    "Help page": "help",
                },
                sizes=(2,),
            ),
        )
    else:
        await callback.message.edit_text(
            text=f"üìù ToDo Bot\n–£–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞:\n{task_title}",
            reply_markup=get_callback_buttons(
                buttons={
                    "Tasks üìù": "list_task",
                    "Help page": "help",
                },
                sizes=(2,),
            ),
        )


@router.callback_query(
    F.data == "list_task",
)
async def list_task(callback: types.CallbackQuery):
    """
    –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    """
    text = await create_list_of_tasks()
    await callback.message.edit_text(
        text=f"üìù ToDo Bot\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{text}",
        reply_markup=get_callback_buttons(
            buttons={
                "Help page": "help",
            },
            sizes=(1,),
        ),
    )


@router.message(F.text.startswith("/del "))
async def delete_task(message: types.Message):
    """
    —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    """
    list_of_task = await create_list_of_tasks()
    try:
        task_for_compliting = int(message.text.split(" ")[1])
        if await task_service.complete(task_for_compliting):
            list_of_task = await create_list_of_tasks()
            text = f"üìù ToDo Bot\n–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{list_of_task}"
        else:
            text = f"üìù ToDo Bot\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{list_of_task}"
        await message.answer(
            text=text,
            reply_markup=get_callback_buttons(
                buttons={
                    "Help page": "help",
                },
                sizes=(1,),
            ),
        )
    except:
        await message.answer(
            text=f"üìù ToDo Bot \
                \n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ /del \
                \n–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ. \
                \n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: \
                \n{list_of_task}",
            reply_markup=get_callback_buttons(
                buttons={
                    "Help page": "help",
                },
                sizes=(1,),
            ),
        )
